/*
 * Copyright 2010, Google Inc.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are
 * met:
 *
 *     * Redistributions of source code must retain the above copyright
 * notice, this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above
 * copyright notice, this list of conditions and the following disclaimer
 * in the documentation and/or other materials provided with the
 * distribution.
 *     * Neither the name of Google Inc. nor the names of its
 * contributors may be used to endorse or promote products derived from
 * this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

namespace o3d {

namespace o2d {

%[
  A Layer is a rectangular region of the O2D canvas to be filled with a
  particular Pattern, with automatic clipping based on stacking order.
%]
[nocpp, include="core/cross/cairo/layer.h"] class Layer : ObjectBase {
  %[
    Available painting operators.

    \var PaintOperator,
    \li BLEND,  Alpha-blend the Pattern on top of lower Layers based on its
                alpha channel. (Default)
    \li BLEND_WITH_TRANSPARENCY,  Like BLEND, but scale the alpha channel down
                                  based on the alpha property of the Layer as an
                                  additional fractional transparency.
    \li COPY,  Copy the colour content of the Pattern directly to the
               destination, ignoring the alpha channel.
    \li COPY_WITH_FADING,  Like COPY, but fade the colour to black based on the
                           alpha property of the Layer as an additional
                           fractional brightness.
  %]
  enum PaintOperator {
    BLEND,
    BLEND_WITH_TRANSPARENCY,
    COPY,
    COPY_WITH_FADING
  };

  %[
    The Pattern used to paint this Layer.
  %]
  [getter, setter] Pattern? pattern;

  %[
    Whether this layer should be visible or not.
  %]
  [getter, setter] bool visible;

  %[
    The transparency for the BLEND_WITH_TRANSPARENCY operator or the fading for
    the COPY_WITH_FADING operator.
  %]
  [getter, setter] double alpha;

  %[
    The x coordinate of the top-left corner of this layer.
  %]
  [getter, setter] double x;

  %[
    The y coordinate of the top-left corner of this layer.
  %]
  [getter, setter] double y;

  %[
    The z coordinate of the layer (used only to determine stacking order).
  %]
  [getter, setter] double z;

  %[
    The width of this layer.
  %]
  [getter, setter] double width;

  %[
    The height of this layer.
  %]
  [getter, setter] double height;

  %[
    A scaling factor to apply to the pattern's x-axis.
  %]
  [getter, setter] double scale_x;

  %[
    A scaling factor to apply to the pattern's y-axis.
  %]
  [getter, setter] double scale_y;

  %[
    The paint operator to use for painting this Layer.
  %]
  [getter, setter] PaintOperator paint_operator;
};  // Layer

}  // namespace o2d

}  // namespace o3d
