/*
 * Copyright 2010, Google Inc.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are
 * met:
 *
 *     * Redistributions of source code must retain the above copyright
 * notice, this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above
 * copyright notice, this list of conditions and the following disclaimer
 * in the documentation and/or other materials provided with the
 * distribution.
 *     * Neither the name of Google Inc. nor the names of its
 * contributors may be used to endorse or promote products derived from
 * this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

namespace o3d {

namespace o2d {

%[
  A Pattern is a container for pixel content for painting to a Layer.
%]
[nocpp, include="core/cross/cairo/pattern.h"] class Pattern : ObjectBase {
  %[
    Create a pattern that paints the content of a texture.

    \param pack The Pack to add the created object to.
    \param texture The texture to paint.
    \return The created pattern
  %]
  [static] Pattern? CreateTexturePattern(Pack pack, Texture texture);

  %[
    Create a pattern that paints a solid colour.

    \param pack The Pack to add the created object to.
    \param red The red component.
    \param blue The blue component.
    \param green The green component.
    \return The created pattern
  %]
  [static] Pattern? CreateRgbPattern(Pack pack,
                                     double red,
                                     double green,
                                     double blue);

  %[
    Create a pattern that paints a solid colour with transparency.

    \param pack The Pack to add the created object to.
    \param red The red component.
    \param blue The blue component.
    \param green The green component.
    \param alpha The alpha component.
    \return The created pattern
  %]
  [static] Pattern? CreateRgbaPattern(Pack pack,
                                      double red,
                                      double green,
                                      double blue,
                                      double alpha);

  %[
    Set the affine transformation matrix that maps user space to pattern space.
    The default matrix is the identity matrix, so that no transformation occurs.

    \param xx xx component of the affine transformation
    \param yx yx component of the affine transformation
    \param xy xy component of the affine transformation
    \param yy yy component of the affine transformation
    \param x0 X translation component of the affine transformation
    \param y0 Y translation component of the affine transformation
  %]
  void SetAffineTransform(double xx,
                          double yx,
                          double xy,
                          double yy,
                          double x0,
                          double y0);
};  // Pattern

}  // namespace o2d

}  // namespace o3d
